{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\WeGen\\\\my-todo-app\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/AuthContext.tsx\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { loginUser, registerUser } from '../services/api'; // Importa do api.ts\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n\n  // Verifica se o usuário está salvo no localStorage ao carregar o componente\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) setUser(JSON.parse(storedUser));\n  }, []);\n\n  // Função para fazer login do usuário\n  const login = async (username, password) => {\n    try {\n      const response = await loginUser(username, password);\n      if (response.data) {\n        setUser(response.data);\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n    } catch (error) {\n      console.error('Falha ao realizar login', error);\n    }\n  };\n\n  // Função para registrar um novo usuário\n  const register = async (username, password) => {\n    try {\n      const response = await registerUser(username, password);\n      if (response.data) {\n        setUser(response.data); // Atualiza o estado do usuário\n        localStorage.setItem('user', JSON.stringify(response.data));\n        console.log('Registro bem-sucedido, estado do usuário atualizado:', response.data); // Adicione este log\n      } else {\n        console.error('Falha ao registrar: resposta inesperada da API.');\n      }\n    } catch (error) {\n      console.error('Falha ao realizar registro', error);\n      throw error; // Adicione isso para capturar o erro no componente RegisterForm\n    }\n  };\n\n  // Função para deslogar o usuário\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook para usar o contexto de autenticação\n_s(AuthProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","loginUser","registerUser","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","storedUser","localStorage","getItem","JSON","parse","login","username","password","response","data","setItem","stringify","error","console","register","log","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/User/Desktop/WeGen/my-todo-app/src/context/AuthContext.tsx"],"sourcesContent":["// src/context/AuthContext.tsx\r\nimport React, { createContext, useState, useEffect, ReactNode, useContext } from 'react';\r\nimport { loginUser, registerUser } from '../services/api'; // Importa do api.ts\r\n\r\ninterface AuthContextType {\r\n  user: any | null;\r\n  login: (username: string, password: string) => Promise<void>;\r\n  register: (username: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<any | null>(null);\r\n\r\n  // Verifica se o usuário está salvo no localStorage ao carregar o componente\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) setUser(JSON.parse(storedUser));\r\n  }, []);\r\n\r\n  // Função para fazer login do usuário\r\n  const login = async (username: string, password: string) => {\r\n    try {\r\n      const response = await loginUser(username, password);\r\n      if (response.data) {\r\n        setUser(response.data);\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n      }\r\n    } catch (error) {\r\n      console.error('Falha ao realizar login', error);\r\n    }\r\n  };\r\n\r\n  // Função para registrar um novo usuário\r\n  const register = async (username: string, password: string) => {\r\n    try {\r\n      const response = await registerUser(username, password);\r\n      if (response.data) {\r\n        setUser(response.data); // Atualiza o estado do usuário\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n        console.log('Registro bem-sucedido, estado do usuário atualizado:', response.data); // Adicione este log\r\n      } else {\r\n        console.error('Falha ao registrar: resposta inesperada da API.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Falha ao realizar registro', error);\r\n      throw error; // Adicione isso para capturar o erro no componente RegisterForm\r\n    }\r\n  };\r\n\r\n  // Função para deslogar o usuário\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, register, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook para usar o contexto de autenticação\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAaC,UAAU,QAAQ,OAAO;AACxF,SAASC,SAAS,EAAEC,YAAY,QAAQ,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAS3D,MAAMC,WAAW,gBAAGR,aAAa,CAA8BS,SAAS,CAAC;AAEzE,OAAO,MAAMC,YAA+C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/E,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAa,IAAI,CAAC;;EAElD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMa,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,UAAU,EAAED,OAAO,CAACI,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;EACjD,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMK,KAAK,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,QAAgB,KAAK;IAC1D,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMnB,SAAS,CAACiB,QAAQ,EAAEC,QAAQ,CAAC;MACpD,IAAIC,QAAQ,CAACC,IAAI,EAAE;QACjBV,OAAO,CAACS,QAAQ,CAACC,IAAI,CAAC;QACtBR,YAAY,CAACS,OAAO,CAAC,MAAM,EAAEP,IAAI,CAACQ,SAAS,CAACH,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC7D;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;;EAED;EACA,MAAME,QAAQ,GAAG,MAAAA,CAAOR,QAAgB,EAAEC,QAAgB,KAAK;IAC7D,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMlB,YAAY,CAACgB,QAAQ,EAAEC,QAAQ,CAAC;MACvD,IAAIC,QAAQ,CAACC,IAAI,EAAE;QACjBV,OAAO,CAACS,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;QACxBR,YAAY,CAACS,OAAO,CAAC,MAAM,EAAEP,IAAI,CAACQ,SAAS,CAACH,QAAQ,CAACC,IAAI,CAAC,CAAC;QAC3DI,OAAO,CAACE,GAAG,CAAC,sDAAsD,EAAEP,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;MACtF,CAAC,MAAM;QACLI,OAAO,CAACD,KAAK,CAAC,iDAAiD,CAAC;MAClE;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK,CAAC,CAAC;IACf;EACF,CAAC;;EAED;EACA,MAAMI,MAAM,GAAGA,CAAA,KAAM;IACnBjB,OAAO,CAAC,IAAI,CAAC;IACbE,YAAY,CAACgB,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAED,oBACEzB,OAAA,CAACC,WAAW,CAACyB,QAAQ;IAACC,KAAK,EAAE;MAAErB,IAAI;MAAEO,KAAK;MAAES,QAAQ;MAAEE;IAAO,CAAE;IAAApB,QAAA,EAC5DA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAA1B,EAAA,CApDaF,YAA+C;AAAA6B,EAAA,GAA/C7B,YAA+C;AAqD5D,OAAO,MAAM8B,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMtC,UAAU,CAACK,WAAW,CAAC;AAAA;AAACiC,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}