{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\WeGen\\\\my-todo-app\\\\src\\\\components\\\\TaskList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { fetchTasksByUser } from '../services/api';\n\n// Definindo a interface para o tipo de tarefa\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = ({\n  userId\n}) => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const loadTasks = async () => {\n      try {\n        const response = await fetchTasksByUser(userId); // Usa a função correta para buscar tarefas por usuário\n        setTasks(response.data);\n      } catch (error) {\n        console.error('Erro ao carregar as tarefas', error);\n      }\n    };\n    loadTasks();\n  }, [userId]); // Carrega as tarefas ao montar o componente ou quando o userId muda\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Lista de Tarefas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: task.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: task.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Status: \", task.isCompleted ? 'Concluída' : 'Pendente']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Categoria: \", task.category]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)]\n    }, task.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useEffect","useState","fetchTasksByUser","jsxDEV","_jsxDEV","TaskList","userId","_s","tasks","setTasks","loadTasks","response","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","task","title","description","isCompleted","category","id","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/WeGen/my-todo-app/src/components/TaskList.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { fetchTasksByUser } from '../services/api';\r\n\r\n// Definindo a interface para o tipo de tarefa\r\ninterface Task {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  isCompleted: boolean;\r\n  category: string;\r\n}\r\n\r\nconst TaskList: React.FC<{ userId: string }> = ({ userId }) => {\r\n  const [tasks, setTasks] = useState<Task[]>([]);\r\n\r\n  useEffect(() => {\r\n    const loadTasks = async () => {\r\n      try {\r\n        const response = await fetchTasksByUser(userId); // Usa a função correta para buscar tarefas por usuário\r\n        setTasks(response.data);\r\n      } catch (error) {\r\n        console.error('Erro ao carregar as tarefas', error);\r\n      }\r\n    };\r\n\r\n    loadTasks();\r\n  }, [userId]); // Carrega as tarefas ao montar o componente ou quando o userId muda\r\n\r\n  return (\r\n    <div>\r\n      <h2>Lista de Tarefas</h2>\r\n      {tasks.map((task) => (\r\n        <div key={task.id}>\r\n          <h3>{task.title}</h3>\r\n          <p>{task.description}</p>\r\n          <p>Status: {task.isCompleted ? 'Concluída' : 'Pendente'}</p>\r\n          <p>Categoria: {task.category}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,gBAAgB,QAAQ,iBAAiB;;AAElD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AASA,MAAMC,QAAsC,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC7D,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAS,EAAE,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMT,gBAAgB,CAACI,MAAM,CAAC,CAAC,CAAC;QACjDG,QAAQ,CAACE,QAAQ,CAACC,IAAI,CAAC;MACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IAEDH,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACJ,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd,oBACEF,OAAA;IAAAW,QAAA,gBACEX,OAAA;MAAAW,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACxBX,KAAK,CAACY,GAAG,CAAEC,IAAI,iBACdjB,OAAA;MAAAW,QAAA,gBACEX,OAAA;QAAAW,QAAA,EAAKM,IAAI,CAACC;MAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrBf,OAAA;QAAAW,QAAA,EAAIM,IAAI,CAACE;MAAW;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBf,OAAA;QAAAW,QAAA,GAAG,UAAQ,EAACM,IAAI,CAACG,WAAW,GAAG,WAAW,GAAG,UAAU;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5Df,OAAA;QAAAW,QAAA,GAAG,aAAW,EAACM,IAAI,CAACI,QAAQ;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAJzBE,IAAI,CAACK,EAAE;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKZ,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACZ,EAAA,CA7BIF,QAAsC;AAAAsB,EAAA,GAAtCtB,QAAsC;AA+B5C,eAAeA,QAAQ;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}